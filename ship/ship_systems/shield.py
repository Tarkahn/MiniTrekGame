from data import constants
from ship.base_ship import BaseShip


class Shield:
    def __init__(self, max_power_level: int, ship: BaseShip):
        self.max_power_level = max_power_level  # PRD: Power level 0-9 scale
        self.current_power_level = 0  # Shields start at power level 0
        self.current_integrity = 100  # PRD: Integrity 0-100 scale (for regeneration)
        self.ship = ship
        self.energy_cost_per_level = constants.SHIELD_ENERGY_COST_PER_LEVEL
        self.absorption_per_level = constants.SHIELD_ABSORPTION_PER_LEVEL  # PRD: 10 damage per level

    def set_power_level(self, power_level: int) -> bool:
        """
        Sets shields to a specific power level (0-9).
        PRD: Power allocation doesn't consume energy - only actual shield operation does.
        Returns True if successful, False otherwise.
        """
        if power_level < 0 or power_level > self.max_power_level:
            print(f"Invalid shield power level: {power_level}. Must be between 0 and {self.max_power_level}.")
            return False

        self.current_power_level = power_level
        print(f"Shields set to power level {self.current_power_level}.")
        return True

    def absorb_damage(self, incoming_damage: int) -> int:
        """
        PRD: Absorbs incoming damage based on power level.
        Each shield level absorbs 10 units of damage per attack.
        Returns remaining damage after absorption.
        """
        # PRD: Shield power level determines absorption capacity
        max_absorption = self.current_power_level * self.absorption_per_level
        absorbed = min(max_absorption, incoming_damage)
        
        # Reduce shield integrity if damage exceeds absorption
        if absorbed > 0:
            integrity_damage = min(absorbed, self.current_integrity)
            self.current_integrity -= integrity_damage
            
        print(f"Shields (level {self.current_power_level}) absorbed {absorbed}/{incoming_damage} damage. Integrity: {self.current_integrity:.1f}")
        return incoming_damage - absorbed

    def regenerate_integrity(self, delta_time: float, energy_cost: bool = True) -> bool:
        """
        PRD: Regenerates shield integrity based on elapsed time.
        PRD: 10 units/minute real-time while idle or activated by player.
        """
        if self.current_integrity >= 100:
            return True  # Already at full integrity
            
        # PRD: 10 units per minute = 10/60 units per second
        regen_rate_per_second = constants.SHIELD_REGEN_RATE_PER_MINUTE / 60.0
        regen_amount = regen_rate_per_second * delta_time
        
        # Optional: Consume energy for regeneration
        if energy_cost:
            energy_needed = int(regen_amount * 2)  # 2 energy per integrity point
            if not self.ship.consume_energy(energy_needed):
                return False  # Not enough energy
        
        self.current_integrity = min(100, self.current_integrity + regen_amount)
        print(f"Shield integrity regenerated by {regen_amount:.1f}. Current: {self.current_integrity:.1f}")
        return True

    def set_power_off(self):
        """
        Sets shield power to 0 (deactivated).
        """
        self.current_power_level = 0
        print("Shields powered down.")
        
    def is_operational(self) -> bool:
        """
        Returns True if shields have integrity > 0.
        """
        return self.current_integrity > 0 